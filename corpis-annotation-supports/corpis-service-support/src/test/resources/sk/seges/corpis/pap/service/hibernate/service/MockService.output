package sk.seges.corpis.pap.service.hibernate.service;
import javax.annotation.Generated;
import javax.persistence.EntityManager;

import sk.seges.corpis.pap.model.dto.MockEntityDTO;
import sk.seges.corpis.pap.model.entity.MockEntity;
import sk.seges.corpis.server.model.converter.provider.AbstractContextualConverterProvider;
import sk.seges.corpis.service.annotation.TransactionPropagationModel;
import sk.seges.sesam.pap.service.annotation.LocalServiceConverter;
import sk.seges.sesam.shared.model.converter.MapConvertedInstanceCache;

@LocalServiceConverter(remoteServices = {MockRemoteService.class})
@Generated(value = "sk.seges.corpis.pap.service.hibernate.HibernateServiceConverterProcessor")
public class MockServiceConverter implements MockRemoteService {
	 
	protected MockLocalService mockLocalServiceService;
	 
	protected AbstractContextualConverterProvider converterProviderContext;
	 
	protected EntityManager entityManager;
	 
	public MockServiceConverter(MockLocalService mockLocalServiceService, AbstractContextualConverterProvider converterProviderContext, EntityManager entityManager) {
		
		this.mockLocalServiceService = mockLocalServiceService;
		this.converterProviderContext = converterProviderContext;
		this.entityManager = entityManager;
	}
	 
	@Override
	public MockEntityDTO find() {
		AbstractContextualConverterProvider converterProviderContext = this.converterProviderContext.get();
		TransactionPropagationModel[] transactionPropagations = new TransactionPropagationModel[] {};
		converterProviderContext.setTransactionPropagations(transactionPropagations);
		converterProviderContext.setCache(new MapConvertedInstanceCache());
		MockEntity result = mockLocalServiceService.find();
		return (MockEntityDTO)(converterProviderContext.getConverterForDomain(result) == null ? null : converterProviderContext.getConverterForDomain(result).toDto(result));
	}
	 
}
