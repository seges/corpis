package sk.seges.corpis.pap.service.hibernate.service;
import javax.annotation.Generated;
import javax.persistence.EntityManager;

import org.springframework.transaction.annotation.Transactional;

import sk.seges.corpis.pap.model.dto.MockEntityDTO;
import sk.seges.corpis.pap.model.entity.MockEntity;
import sk.seges.corpis.server.model.converter.provider.AbstractContextualConverterProvider;
import sk.seges.corpis.service.annotation.PropagationTarget;
import sk.seges.corpis.service.annotation.PropagationType;
import sk.seges.corpis.service.annotation.TransactionPropagationModel;
import sk.seges.sesam.pap.service.annotation.LocalServiceConverter;
import sk.seges.sesam.shared.model.converter.MapConvertedInstanceCache;

@LocalServiceConverter(remoteServices = {TransactionalMockRemoteService.class})
@Generated(value = "sk.seges.corpis.pap.service.hibernate.HibernateServiceConverterProcessor")
public class TransactionalMockServiceConverter implements TransactionalMockRemoteService {
	 
	protected TransactionalMockLocalService transactionalMockLocalServiceService;
	 
	protected AbstractContextualConverterProvider converterProviderContext;
	 
	protected EntityManager entityManager;
	 
	public TransactionalMockServiceConverter(TransactionalMockLocalService transactionalMockLocalServiceService, AbstractContextualConverterProvider converterProviderContext, EntityManager entityManager) {
		
		this.transactionalMockLocalServiceService = transactionalMockLocalServiceService;
		this.converterProviderContext = converterProviderContext;
		this.entityManager = entityManager;
	}
	 
	@Override
	public MockEntityDTO findInTransaction() {
		AbstractContextualConverterProvider converterProviderContext = this.converterProviderContext.get();
		TransactionPropagationModel[] transactionPropagations = new TransactionPropagationModel[] {new TransactionPropagationModel(new String[] {}, new PropagationTarget[] {PropagationTarget.RETURN_VALUE, PropagationTarget.ARGUMENTS}, PropagationType.ISOLATE)};
		converterProviderContext.setTransactionPropagations(transactionPropagations);
		converterProviderContext.setCache(new MapConvertedInstanceCache());
		MockEntity result = transactionalMockLocalServiceService.findInTransaction();
		return (MockEntityDTO)(converterProviderContext.getConverterForDomain(result) == null ? null : converterProviderContext.getConverterForDomain(result).toDto(result));
	}
	 
	@Override
	public MockEntityDTO findWithoutTransaction() {
		AbstractContextualConverterProvider converterProviderContext = this.converterProviderContext.get();
		TransactionPropagationModel[] transactionPropagations = new TransactionPropagationModel[] {new TransactionPropagationModel(new String[] {}, new PropagationTarget[] {PropagationTarget.RETURN_VALUE, PropagationTarget.ARGUMENTS}, PropagationType.ISOLATE)};
		converterProviderContext.setTransactionPropagations(transactionPropagations);
		converterProviderContext.setCache(new MapConvertedInstanceCache());
		MockEntity result = transactionalMockLocalServiceService.findWithoutTransaction();
		return (MockEntityDTO)(converterProviderContext.getConverterForDomain(result) == null ? null : converterProviderContext.getConverterForDomain(result).toDto(result));
	}
	 
	@Override
	public MockEntityDTO findWithoutBlob() {
		AbstractContextualConverterProvider converterProviderContext = this.converterProviderContext.get();
		TransactionPropagationModel[] transactionPropagations = new TransactionPropagationModel[] {new TransactionPropagationModel(new String[] {"blob"}, new PropagationTarget[] {PropagationTarget.RETURN_VALUE}, PropagationType.ISOLATE)};
		converterProviderContext.setTransactionPropagations(transactionPropagations);
		converterProviderContext.setCache(new MapConvertedInstanceCache());
		MockEntity result = transactionalMockLocalServiceService.findWithoutBlob();
		return (MockEntityDTO)(converterProviderContext.getConverterForDomain(result) == null ? null : converterProviderContext.getConverterForDomain(result).toDto(result));
	}
	 
	@Override
	public MockEntityDTO findWithoutBlobBothWays(MockEntityDTO arg0) {
		AbstractContextualConverterProvider converterProviderContext = this.converterProviderContext.get();
		TransactionPropagationModel[] transactionPropagations = new TransactionPropagationModel[] {new TransactionPropagationModel(new String[] {"blob"}, new PropagationTarget[] {PropagationTarget.RETURN_VALUE, PropagationTarget.ARGUMENTS}, PropagationType.ISOLATE)};
		converterProviderContext.setTransactionPropagations(transactionPropagations);
		converterProviderContext.setCache(new MapConvertedInstanceCache());
		MockEntity result = transactionalMockLocalServiceService.findWithoutBlobBothWays((MockEntity)(converterProviderContext.getConverterForDto((MockEntityDTO)arg0) == null ? null : converterProviderContext.getConverterForDto((MockEntityDTO)arg0).fromDto((MockEntityDTO)arg0)));
		return (MockEntityDTO)(converterProviderContext.getConverterForDomain(result) == null ? null : converterProviderContext.getConverterForDomain(result).toDto(result));
	}
	 
	@Transactional
	@Override
	public MockEntityDTO findWithReturnBlob(MockEntityDTO arg0) {
		AbstractContextualConverterProvider converterProviderContext = this.converterProviderContext.get();
		TransactionPropagationModel[] transactionPropagations = new TransactionPropagationModel[] {new TransactionPropagationModel(new String[] {"blob"}, new PropagationTarget[] {PropagationTarget.RETURN_VALUE}, PropagationType.PROPAGATE), new TransactionPropagationModel(new String[] {"blob"}, new PropagationTarget[] {PropagationTarget.ARGUMENTS}, PropagationType.ISOLATE)};
		converterProviderContext.setTransactionPropagations(transactionPropagations);
		converterProviderContext.setCache(new MapConvertedInstanceCache());
		MockEntity result = transactionalMockLocalServiceService.findWithReturnBlob((MockEntity)(converterProviderContext.getConverterForDto((MockEntityDTO)arg0) == null ? null : converterProviderContext.getConverterForDto((MockEntityDTO)arg0).fromDto((MockEntityDTO)arg0)));
		return (MockEntityDTO)(converterProviderContext.getConverterForDomain(result) == null ? null : converterProviderContext.getConverterForDomain(result).toDto(result));
	}
	 
}
