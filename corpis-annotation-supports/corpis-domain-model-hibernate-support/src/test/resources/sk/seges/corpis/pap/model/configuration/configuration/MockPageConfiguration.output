package sk.seges.corpis.pap.model.configuration.configuration;
import java.io.Serializable;

import javax.annotation.Generated;
import javax.persistence.EntityManager;

import sk.seges.corpis.pap.converter.hibernate.TransactionalConverter;
import sk.seges.corpis.pap.model.converter.MockStringConverter;
import sk.seges.sesam.dao.Page;
import sk.seges.sesam.pap.model.annotation.TransferObjectMapping;
import sk.seges.sesam.shared.model.converter.ConverterProviderContext;
import sk.seges.sesam.utils.CastUtils;

@SuppressWarnings("serial")
@TransferObjectMapping(dtoClass = Page.class,
		domainClassName = "sk.seges.sesam.dao.Page", 
		configurationClassName = "sk.seges.corpis.pap.model.configuration.configuration.MockPageConfiguration", 
		generateConverter = false, generateDto = false, 
		converterClassName = "sk.seges.corpis.pap.model.configuration.configuration.MockPageConverter")
@Generated(value = "sk.seges.corpis.pap.model.hibernate.HibernateTransferObjectConverterProcessor")
public class MockPageConverter extends TransactionalConverter<Page, Page> {
	 
	protected final EntityManager entityManager;
	 
	protected final ConverterProviderContext converterProviderContext;
	 
	public MockPageConverter(EntityManager entityManager, ConverterProviderContext converterProviderContext) {
		super();
		this.entityManager = entityManager;
		this.converterProviderContext = converterProviderContext;
	}
	 
	public boolean equals(Object _domainArg, Object _dtoArg) {
		if (_domainArg == null) {
			return (_dtoArg == null);
		}
	
		if (_dtoArg == null) {
			return false;
		}
	
		if (!(_domainArg instanceof Page)) {
			return false;
		}
	
		Page _domain = (Page)_domainArg;
	
		if (!(_dtoArg instanceof Page)) {
			return false;
		}
	
		Page _dto = (Page)_dtoArg;
	
		if (_domain.getFilterable() == null) {
			if (_dto.getFilterable() != null)
				return false;
		} else if (!_domain.getFilterable().equals(_dto.getFilterable()))
			return false;
		if (_domain.getPageSize() != _dto.getPageSize())
			return false;
		if (_domain.getProjectableResult() == null) {
			if (_dto.getProjectableResult() != null)
				return false;
		} else if (!_domain.getProjectableResult().equals(_dto.getProjectableResult()))
			return false;
		if (_domain.getProjectables() == null) {
			if (_dto.getProjectables() != null)
				return false;
		} else if (!_domain.getProjectables().equals(_dto.getProjectables()))
			return false;
		if (_domain.getSortables() == null) {
			if (_dto.getSortables() != null)
				return false;
		} else if (!_domain.getSortables().equals(_dto.getSortables()))
			return false;
		if (_domain.getStartIndex() != _dto.getStartIndex())
			return false;
		return true;
	}
	
	public Page createDtoInstance(Serializable id) {
		Page _result = new Page();
		return _result;
	}
	
	public Page toDto(Page _domain) {
	
		if (_domain  == null) {
			return null;
		}
	
		Page _result = createDtoInstance(null);
		return convertToDto(_result, _domain);
	}
	
	public Page convertToDto(Page _result, Page _domain) {
	
		if (_domain  == null) {
			return null;
		}
	
		_result.setFilterable(_domain.getFilterable());
		_result.setPageSize(_domain.getPageSize());
		MockStringConverter converterProjectableResult = getDomainMockStringConverter(_domain.getProjectableResult());
		if (converterProjectableResult != null) {
			_result.setProjectableResult(converterProjectableResult.toDto(CastUtils.cast((String)_domain.getProjectableResult(), String.class)));
		}
		_result.setProjectables(_domain.getProjectables());
		_result.setSortables(_domain.getSortables());
		_result.setStartIndex(_domain.getStartIndex());
		return _result;
	}
	
	public Page createDomainInstance(Serializable id) {
		if (id != null) {
			Page _result = (Page)entityManager.find(Page.class, id);
			if (_result != null) {
				return _result;
			}
		}
	
		 return new Page();
	}
	
	public Page fromDto(Page _dto) {
	
		if (_dto == null) {
			return null;
		}
	
		Page _result = createDomainInstance(null);
	
		return convertFromDto(_result, _dto);
	}
	
	public Page convertFromDto(Page _result, Page _dto) {
	
		if (_dto  == null) {
			return null;
		}
	
		_result.setFilterable(_dto.getFilterable());
		_result.setPageSize(_dto.getPageSize());
		MockStringConverter converterProjectableResult = getDtoMockStringConverter(_dto.getProjectableResult());
		if (converterProjectableResult != null) {
			_result.setProjectableResult((String)converterProjectableResult.fromDto((String)_dto.getProjectableResult()));
		}
		_result.setProjectables(_dto.getProjectables());
		_result.setSortables(_dto.getSortables());
		_result.setStartIndex(_dto.getStartIndex());
		return _result;
	}
	
	protected MockStringConverter getDomainMockStringConverter(String obj){
		MockStringConverter result = new MockStringConverter(converterProviderContext);
		return result;
	}
	
	protected MockStringConverter getDtoMockStringConverter(String obj){
		MockStringConverter result = new MockStringConverter(converterProviderContext);
		return result;
	}
}
