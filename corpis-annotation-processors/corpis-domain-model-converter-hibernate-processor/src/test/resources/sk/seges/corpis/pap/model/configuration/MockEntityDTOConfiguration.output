package sk.seges.corpis.pap.model.configuration;
import java.io.Serializable;
import java.sql.Blob;

import javax.annotation.Generated;
import javax.persistence.EntityManager;

import sk.seges.corpis.pap.converter.hibernate.TransactionalConverter;
import sk.seges.corpis.pap.model.converter.MockBlobConverter;
import sk.seges.corpis.pap.model.dto.MockEntityDTO;
import sk.seges.corpis.pap.model.entity.MockEntity;
import sk.seges.corpis.server.converter.utils.ConverterUtils;
import sk.seges.sesam.pap.model.annotation.TransferObjectMapping;
import sk.seges.sesam.shared.model.converter.ConverterProviderContext;
import sk.seges.sesam.utils.CastUtils;

@SuppressWarnings("serial")
@TransferObjectMapping(dtoClass = MockEntityDTO.class,
		domainClassName = "sk.seges.corpis.pap.model.entity.MockEntity", 
		configurationClassName = "sk.seges.corpis.pap.model.configuration.MockEntityDTOConfiguration", 
		generateConverter = false, generateDto = false, 
		converterClassName = "sk.seges.corpis.pap.model.configuration.MockEntityDTOConverter")
@Generated(value = "sk.seges.corpis.pap.model.hibernate.HibernateTransferObjectConverterProcessor")
public class MockEntityDTOConverter extends TransactionalConverter<MockEntityDTO, MockEntity> {
	 
	protected final EntityManager entityManager;
	 
	protected final ConverterProviderContext converterProviderContext;
	 
	public MockEntityDTOConverter(EntityManager entityManager, ConverterProviderContext converterProviderContext) {
		super();
		this.entityManager = entityManager;
		this.converterProviderContext = converterProviderContext;
	}
	 
	public boolean equals(Object _domainArg, Object _dtoArg) {
		if (_domainArg == null) {
			return (_dtoArg == null);
		}
	
		if (_dtoArg == null) {
			return false;
		}
	
		if (!(_domainArg instanceof MockEntity)) {
			return false;
		}
	
		MockEntity _domain = (MockEntity)_domainArg;
	
		if (!(_dtoArg instanceof MockEntityDTO)) {
			return false;
		}
	
		MockEntityDTO _dto = (MockEntityDTO)_dtoArg;
	
		if (_domain.getBlob() == null) {
			if (_dto.getContentDetached() != null)
				return false;
		} else if (!_domain.getBlob().equals(_dto.getContentDetached()))
			return false;
		if (_domain.getId() == null) {
			if (_dto.getId() != null)
				return false;
		} else if (!_domain.getId().equals(_dto.getId()))
			return false;
		if (_domain.getName() == null) {
			if (_dto.getName() != null)
				return false;
		} else if (!_domain.getName().equals(_dto.getName()))
			return false;
		return true;
	}
	
	public MockEntityDTO createDtoInstance(Serializable id) {
		MockEntityDTO _result = new MockEntityDTO();
		return _result;
	}
	
	public MockEntityDTO toDto(MockEntity _domain) {
	
		if (_domain  == null) {
			return null;
		}
	
		MockEntityDTO _result = getDtoInstance(_domain, _domain.getId());
		if (_result != null) {
			return _result;
		}
	
		_result = createDtoInstance(_domain.getId());
		return convertToDto(_result, _domain);
	}
	
	public MockEntityDTO convertToDto(MockEntityDTO _result, MockEntity _domain) {
	
		if (_domain  == null) {
			return null;
		}
	
		MockEntityDTO dtoFromCache = getDtoFromCache(_domain, _domain.getId());
	
		if (dtoFromCache != null) {
			return dtoFromCache;
		}
	
		putDtoIntoCache(_domain, _result,_result.getId());
	
		if (ConverterUtils.convertResult(transactionPropagations, "blob")) {
			MockBlobConverter converterContentDetached = getDomainMockBlobConverter(_domain.getBlob());
			if (converterContentDetached != null) {
				_result.setContentDetached(converterContentDetached.toDto(CastUtils.cast((Blob)_domain.getBlob(), Blob.class)));
			}
		};
		_result.setName(_domain.getName());
		return _result;
	}
	
	public MockEntity createDomainInstance(Serializable id) {
		if (id != null) {
			MockEntity _result = (MockEntity)entityManager.find(MockEntity.class, id);
			if (_result != null) {
				return _result;
			}
		}
	
		 return new MockEntity();
	}
	
	public MockEntity fromDto(MockEntityDTO _dto) {
	
		if (_dto == null) {
			return null;
		}
	
		MockEntity _result = getDomainInstance(_dto, _dto.getId());
		if (_result != null) {
			return _result;
		}
		Long _id = _dto.getId();
	
		_result = createDomainInstance(_id);
	
		return convertFromDto(_result, _dto);
	}
	
	public MockEntity convertFromDto(MockEntity _result, MockEntityDTO _dto) {
	
		if (_dto  == null) {
			return null;
		}
	
		MockEntity domainFromCache = getDomainFromCache(_dto, _dto.getId());
	
		if (domainFromCache != null) {
			return domainFromCache;
		}
	
		putDomainIntoCache(_dto, _result,_result.getId());
	
		if (ConverterUtils.convertArg(transactionPropagations, "blob")) {
			if (_result.getBlob() != null) {
				if (_dto.getContentDetached() != null) {
					MockBlobConverter converterContentDetached = getDtoMockBlobConverter(_dto.getContentDetached());
					_result.setBlob((Blob)converterContentDetached.convertFromDto(CastUtils.cast(_result.getBlob(), Blob.class), _dto.getContentDetached()));
				} else {
					_result.setBlob(null);
				}
			} else {
				MockBlobConverter converterContentDetached = getDtoMockBlobConverter(_dto.getContentDetached());
				if (converterContentDetached != null) {
					_result.setBlob((Blob)converterContentDetached.fromDto((String)_dto.getContentDetached()));
				}
			}
		}
		_result.setName(_dto.getName());
		return _result;
	}
	
	protected MockBlobConverter getDomainMockBlobConverter(Blob obj){
		MockBlobConverter result = new MockBlobConverter();
		return result;
	}
	
	protected MockBlobConverter getDtoMockBlobConverter(String obj){
		MockBlobConverter result = new MockBlobConverter();
		return result;
	}
}
