module sk.seges.corpis.server.generator.ServerWorkflow

import org.eclipse.emf.mwe.utils.*
import org.fornax.cartridges.sculptor.dsl.*
import org.fornax.cartridges.sculptor.generator.util.*
import org.fornax.utilities.formatter.xml.XmlFormatter


var targetDir = "src/generated/java"
var fileEncoding = "ISO-8859-1"
var modelFile
var appProject

var outlet.fileEncoding = "ISO-8859-1"
var outlet.src.dir ="../${appProject}/src/generated/java"
var outlet.src.once.dir = "../${appProject}/src/main/java"
var outlet.src.test.dir = "../${appProject}/src/test/generated/java"
var outlet.src.test.once.dir = "../${appProject}/src/test/java"
var outlet.res.test.once.dir = "../${appProject}/src/test/resources"
var outlet.res.once.dir = "../${appProject}/src/main/resources"
var outlet.res.dir = "../${appProject}/src/generated/resources"
var outlet.res.test.dir = "../${appProject}/src/test/generated/resources"
var outlet.webroot.dir = "../${appProject}/src/main/webapp"

Workflow {
        bean = org.fornax.cartridges.sculptor.generator.util.InitLogging {}
        bean = org.eclipse.emf.mwe.utils.StandaloneSetup {
                platformUri = ".."
                // Register Sculptor dsl meta model
                registerGeneratedEPackage = "org.fornax.cartridges.sculptor.dsl.sculptordsl.SculptordslPackage"

                // Register Sculptor meta model
                registerGeneratedEPackage = "sculptormetamodel.SculptormetamodelPackage"
        }

        // Load/reload generator properties
        bean = org.fornax.cartridges.sculptor.generator.util.GeneratorProperties {}

        component = org.eclipse.emf.mwe.utils.DirectoryCleaner {
                directory = 'src-gen'
        }

	component = org.eclipse.xtext.mwe.UriBasedReader {
                uri = modelFile

                // this class will be generated by the xtext generator
                register = SculptordslStandaloneSetup {}
                load = {
                        slot = "model"
                        type = "DslApplication"
                }
        }
	
        component = org.eclipse.xtend.XtendComponent {
                metaModel = org.eclipse.xtend.typesystem.emf.EmfRegistryMetaModel {
                        useSingleGlobalResourceSet = true
                }

                //extensionAdvice = transformationAdvice
                invoke = "transformation::DslTransformation::transform((DslModel)(model.first().eContainer))"
                outputSlot = "transformedModel"
        }

        // Model transformation
        component = org.eclipse.xtend.XtendComponent {
                metaModel = org.eclipse.xtend.typesystem.emf.EmfRegistryMetaModel {
                        useSingleGlobalResourceSet = true
                }

                //extensionAdvice = transformationAdvice
                invoke = "transformation::Transformation::modify(transformedModel)"
                outputSlot = "transformedModel"
        }


	component = org.eclipse.xpand2.Generator {
		expand = "sk::seges::corpis::server::template::ServerRoot::main FOR transformedModel"
                outlet = {                               path = outlet.src.dir                             postprocessor = JavaBeautifier {}}
                outlet = {name = "TO_SRC"                path = outlet.src.once.dir      overwrite = false postprocessor = JavaBeautifier {}}
                outlet = {name = "TO_SRC_TEST"           path = outlet.src.test.once.dir overwrite = false postprocessor = JavaBeautifier {}}
                outlet = {name = "TO_GEN_SRC_TEST"       path = outlet.src.test.dir      overwrite = true  postprocessor = JavaBeautifier {}}
                outlet = {name = "TO_RESOURCES"          path = outlet.res.once.dir      overwrite = false postprocessor = XmlFormatter {}}
                outlet = {name = "TO_RESOURCES_TEST"     path = outlet.res.test.once.dir overwrite = false postprocessor = XmlFormatter {}}
                outlet = {name = "TO_GEN_RESOURCES"      path = outlet.res.dir           overwrite = true  postprocessor = XmlFormatter {}}
                outlet = {name = "TO_GEN_RESOURCES_TEST" path = outlet.res.test.dir      overwrite = true  postprocessor = XmlFormatter {}}
                outlet = {name = "TO_WEBROOT"            path = outlet.webroot.dir       overwrite = false postprocessor = XmlFormatter {}}
                outlet = {name = "TO_GEN_WEBROOT"        path = outlet.webroot.dir       overwrite = true  postprocessor = XmlFormatter {}}

		
		fileEncoding = fileEncoding
		
	}
}

