«IMPORT sculptormetamodel»

«EXTENSION extensions::helper»
«EXTENSION extensions::properties»

«DEFINE main FOR Application»
	«IF !modules.isEmpty»
		«EXPAND dataEntity FOREACH getAllDomainObjects(false)» 
		«EXPAND dto FOREACH getAllDomainObjects(false)» 
		«REM»«EXPAND templates::DomainObject::domainObject FOREACH getAllDomainObjects(false)»
		«EXPAND Gilead::dataEntity FOREACH getAllDomainObjects(false)»«ENDREM»
	«ENDIF»
«ENDDEFINE»

«DEFINE dataEntity FOR Entity»
	«FILE javaFileName(getDomainPackage() + "." + name + "Data")»
package «getDomainPackage()»;
		
import sk.seges.sesam.domain.IMutableDomainObject;

public interface «name»Data<K> extends IMutableDomainObject<K>{
	«EXPAND attribute FOREACH attributes»
	«EXPAND reference FOREACH references»
}
	«ENDFILE»
«ENDDEFINE»

«DEFINE dataEntity FOR BasicType»
	«FILE javaFileName(getDomainPackage() + "." + name + "Data")»
package «getDomainPackage()»;
		
public interface «name»Data {
	«EXPAND attribute FOREACH attributes»
	«EXPAND reference FOREACH references»
}
	«ENDFILE»
«ENDDEFINE»


«DEFINE attribute FOR Attribute»
	static final String «name.toUpperCase()» = "«name»";

	«IF this.name == "id"»
	«ELSE»
		«EXPAND propertyGetter»
		«EXPAND propertySetter»
	«ENDIF»
«ENDDEFINE»

«DEFINE propertyGetter FOR Attribute»
	«getTypeName()» «getGetAccessor()»();
«ENDDEFINE»

«DEFINE propertySetter FOR Attribute»
	void set«name.toFirstUpper()»(«getTypeName()» «name»);
«ENDDEFINE»

«DEFINE reference FOR Reference»
	static final String «name.toUpperCase()» = "«name»";
	
	«getTypeName()»Data «getGetAccessor()»();
	void set«name.toFirstUpper()»(«getTypeName()»Data «name»);
«ENDDEFINE»

«DEFINE dto FOR BasicType»
	«FILE javaFileName(getDomainPackage() + ".dto." + name + "Dto")»
package «getDomainPackage()».dto;
		
import «getDomainPackage()».«name»Data;

public class «name»Dto implements «name»Data {
	«EXPAND dtoAttribute FOREACH attributes»
	«EXPAND dtoReference FOREACH references»
}
	«ENDFILE»
«ENDDEFINE»

«DEFINE dto FOR Entity»
	«FILE javaFileName(getDomainPackage() + ".dto." + name + "Dto")»
package «getDomainPackage()».dto;
		
import «getDomainPackage()».«name»Data;

public class «name»Dto implements «name»Data<«getIdAttributeType(this)»> {
	«EXPAND templates::DomainObject::serialVersionUID»
	
	«EXPAND dtoAttribute FOREACH attributes»
	«EXPAND dtoReference FOREACH references»
}
	«ENDFILE»
«ENDDEFINE»

«DEFINE dtoAttribute FOR Attribute»
	protected «getTypeName()» «name»;
	«EXPAND propertyDtoGetter»
	«EXPAND propertyDtoSetter»
«ENDDEFINE»

«DEFINE propertyDtoGetter FOR Attribute»
	public «getTypeName()» «getGetAccessor()»() {
		return «name»;
	}
«ENDDEFINE»

«DEFINE propertyDtoSetter FOR Attribute»
	public void set«name.toFirstUpper()»(«getTypeName()» «name») {
		this.«name» = «name»;
	}
«ENDDEFINE»

«DEFINE dtoReference FOR Reference»
	@Override
	public «getTypeName()»Data «getGetAccessor()»() {
	}
	@Override
	public void set«name.toFirstUpper()»(«getTypeName()»Data «name») {
	}
«ENDDEFINE»